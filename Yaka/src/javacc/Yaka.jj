/*
 *
 *       Auteur: Poilane Pierre
 *
 * 	creation : 13 fevrier 2002
 *
 *     nature : projet etudiant
 *
 */


options{
	JDK_VERSION="1.5";	
}

PARSER_BEGIN(Yaka)



public class Yaka {
	
public static Declaration decl = new Declaration();
public static TabIdent tabIdent = new TabIdent();
public static Expression expr = new Expression();

public static YVMasm yvm = new YVMasm(); //Classe YVM pour la generation */
  public static void main(String args[]) { 
    Yaka analyseur;
    java.io.InputStream input;

    if (args.length==1) {
      System.out.print(args[args.length-1] + ": ");
      try {
        input = new java.io.FileInputStream(args[args.length-1]+".yaka");
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Fichier introuvable.");
        return;
      }
    } else if (args.length==0) {
      System.out.println("Lecture sur l'entree standard...");
      input = System.in;
    } else {
      System.out.println("Usage: java Gram [fichier]");
      return;
    }
    try {
      analyseur = new Yaka(input);
      analyseur.analyse();
      System.out.println("analyse syntaxique reussie!");
    } catch (ParseException e) {
      String msg = e.getMessage();
      msg = msg.substring(0,msg.indexOf("\n"));
      System.out.println("Erreur de syntaxe : "+msg);
    }
  } 
}

PARSER_END(Yaka)
/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/

TOKEN_MGR_DECLS :
{public static String identLu,chaineLue;
 public static int entierLu;}

/*** Skip whitespace and comments ***/
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "(*"   : IN_COMMENT
}
<IN_COMMENT> MORE:
{
  < ~[] >
}
<IN_COMMENT> SKIP:
{
   < "*)" >  {SwitchTo(DEFAULT);} 
}


/* Mots reserves*/

TOKEN :
{
  < BOOLEEN: "BOOLEEN" >
| < VAR: "VAR" >
| < FAIRE: "FAIRE" >
| < SINON: "SINON" >
| < POUR: "POUR" >
| < SI: "SI" >
| < FSI: "FSI">
| < ENTIER: "ENTIER" >
| < RETOURNE: "RETOURNE" >
| < VRAI: "VRAI" >
| < TANTQUE: "TANTQUE" >
| <CONST : "CONST">
| <FAUX : "FAUX">
| <FAIT : "FAIT">
| <OU : "OU">
| <ET : "ET">
| <NON : "NON">
| <FONCTION : "FONCTION">
| <FFONCTION  : "FFONCTION">
| <PROGRAMME : "PROGRAMME" >
| <FPROGRAMME: "FPROGRAMME" >
| <PRINCIPAL : "PRINCIPAL">
| <FPRINCIPAL : "FPRINCIPAL">
| <ALORS : "ALORS">
| <ECRIRE : "ECRIRE">
| <LIRE : "LIRE">
| <ALALIGNE : "ALALIGNE">
}



/*** unites de base nombres, idents,  strings ***/
TOKEN  :
{
  < #chiffre : ["0"-"9"] >
| < entier : (<chiffre>)+ > 
	{ entierLu = Integer.parseInt(image.toString());
        }
| < #lettre: ["A"-"Z","a"-"z"] >
| < ident : <lettre> (<lettre> | <chiffre>)* >
	{identLu =image.toString();	
	}
| < chaine : "\"" (~["\""])* "\"" | "'" (~["'"])* "'" >
	{ chaineLue = image.toString();
	 }
}


/**************************************/
/********debut de la grammaire ********/
/**************************************/
void analyse() : {}
{
   <PROGRAMME> {yvm.entete();} /*entete*/<ident>
   bloc()
   <FPROGRAMME> {yvm.enqueue();}/*queue*/
}

void bloc() : {}{
 (declConst())*
 (declVar())*
 {yvm.ouvrePrinc(Math.abs(tabIdent.offset));}
 suiteInstr() 
}

void declConst() : {}
{
  <CONST>  defConst()  ( "," defConst() )* ";" 
}

void defConst() : {}
{
  <ident> {decl.setNom(YakaTokenManager.identLu);} 	  	
   "=" valConst() 
}

void valConst() : {}
{
  <entier> {decl.declConst(YakaTokenManager.entierLu);}		
 | <ident> {decl.declConst(YakaTokenManager.identLu);}			
 | <VRAI>  {decl.declConst(true);}		
 | <FAUX>  {decl.declConst(false);}		
}


void declVar() : {} 
{
  <VAR>  type() 	
  <ident> {decl.declVar(YakaTokenManager.identLu);}		
  ("," 
      <ident> {decl.declVar(YakaTokenManager.identLu);}
  )* ";" 
	
}

void type() :{}
{
   <ENTIER> {decl.setIsInteger(true);}			
 | <BOOLEEN> {decl.setIsInteger(false);}	
}

/*
 * Syntaxe des affectation, entrees, sorties.
 */

void iteration() : {}
{
  <TANTQUE> expression() {expr.verifBool();} <FAIRE> suiteInstr() <FAIT>
}

void suiteInstr() : {}
{
  iteration() |  ( instruction() (";" (instruction())? )* )
}

void instruction() : {}
{
  affectation() 
  | lecture() 
  | ecriture()
}

void affectation() : {}
{
  <ident> {expr.stockIdent(YakaTokenManager.identLu);} "=" expression() {expr.affect();}
}

void lecture() : {}
{
  <LIRE> "(" <ident> ")" {expr.lire(YakaTokenManager.identLu);}
}

void ecriture() : {}
{
  ( <ECRIRE> "(" (expression() {expr.ecrire();} | <chaine> {expr.ecrireChaine(YakaTokenManager.chaineLue);} ) ")" )
  | <ALALIGNE> {expr.retourLigne();}
}


/*
 * Expression .
 */
void expression() : {}
{
  simpleExpr() (opRel() simpleExpr() {expr.generationCalcul();} )? /*Generation des iconst, idiv, iadd etc...*/
  
}

void simpleExpr() : {}
{
   terme() (opAdd() terme() {expr.generationCalcul();} )* 
} 

void terme() : {}
{
  facteur() (opMul() facteur() {expr.generationCalcul();} )*
}

void facteur() : {}
{   primaire() 
  |  opNeg() primaire() {expr.neg();}
}

void primaire (): {}
{
   valeur()
 | "(" expression() ")" 
 
}

void valeur () : {}
{ <entier> {expr.addEntier(YakaTokenManager.entierLu);}		
 | <ident> {expr.addIdent(YakaTokenManager.identLu);}		
 | <VRAI>  {expr.addEtat(true);}		
 | <FAUX>  {expr.addEtat(false);}		
 
}

void opRel() : {}
{
   "=" 	{expr.addOperateur("=");}	
 | "<>" {expr.addOperateur("<>");}	
 | "<" 	{expr.addOperateur("<");}	
 | "<=" {expr.addOperateur("<=");}	
 | ">" 	{expr.addOperateur(">");}	
 | ">=" {expr.addOperateur(">=");}	
} 

void opAdd() : {}
{
    "+" {expr.addOperateur("+");}		
  |  "-" {expr.addOperateur("-");}  
  | <OU> {expr.addOperateur("OU");}	
}

void opMul() : {}
{
  "*"    {expr.addOperateur("*");}		
  | "/"	 {expr.addOperateur("/");}	
  | <ET> {expr.addOperateur("ET");}	
} 

void opNeg() : {}
{ "-" 		
 | <NON>
}


